
To parse the data in the `stats.txt` file, you can use the following code:
```bash
#!/bin/bash

# Read in the stats file
while read -r line; do
  # Split the line into name and value using the ":" character as the delimiter
  IFS=':'; read -ra parts <<< "$line"
  # Set the variable for the name to the first part of the split, and the variable for the value to the second part
  name=${parts[0]}
  value=${parts[1]}
  # Save the data into bash variables
  eval "$name=$value"
done < stats.txt
```
This code uses the `read` command with the `-a` option to store the output in an array, and then sets the variable for the name using the first element of the array, and the variable for the value using the second element. The `eval` command is used to set the variables in the shell environment.

To parse the data in the `show.txt` file, you can use a similar approach:
```bash
#!/bin/bash

# Read in the show file
while read -r line; do
  # Split the line into name and value using the ":" character as the delimiter
  IFS=':'; read -ra parts <<< "$line"
  # Set the variable for the name to the first part of the split, and the variable for the value to the second part
  name=${parts[0]}
  value=${parts[1]}
  # Save the data into bash variables
  eval "$name=$value"
done < show.txt
```
This code uses the `read` command with the `-a` option to store the output in an array, and then sets the variable for the name using the first element of the array, and the variable for the value using the second element. The `eval` command is used to set the variables in the shell environment.

You can then access the data in the bash variables using the syntax `${variable_name}`. For example, if you have a variable named `total_duration` with a value of `4.687657458s`, you can access it using the syntax `${total_duration}` or `$total_duration`.

