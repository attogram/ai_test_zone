/lo for the current 16bit int.
 * This means that if we have a value of 0x5A34, it would be stored as:
 *
 * 34 23 12 | 0A
 */

 //TODO: need to do this on 8 bit data too!!!

 /* TODO:
  * 9/2/2016
  * Need to figure out how I can get the current value of all bytes.
  */


 //We need to make sure that we are at a word boundary so the following
 //code is safe.
 if((uint8_t *)value % 4)
   return;

 uint32_t *data = (uint32_t*)value;
 
 int i,j;
 
 for(i=0;i<length/sizeof(int);i++) {
   
   int valuehi,valuelo;

   hi = (*data & 0xFFFF0000) >> 16;
   lo = *data & 0x0000FFFF;

   if(!(*data & 0x80000000)) {
     hi &= 0x7fff;
     valuehi = (hi << 4) | 0x000F;
     hi |= 0x8000;
   } else {
     
     if(lo >= 256)
       hi++;

     valuehi = (hi << 3) | ((lo & 0xF800) >> 11);
     //printf("Valuehi: %i\n",valuehi);
   }

   lo &= 0x7FF;
   
   if(lo >= 256 && i != length/sizeof(int)-1) {
     
     valuehi++;

     hi = (*data & 0xFFFF0000) >> 16; //The next int to be processed.
     
     lo = *data & 0x0000FFFF;
   }
   
   if(!(*data & 0x40000000)) {
     valuelo = (lo << 4) | 0x000F;
     //printf("Valuelo: %i\n",valuelo);
   } else {
     
     hi |= ((lo & 0xFFE0) >> 5);

     lo &= 0x1F;
 
     valuelo = (hi << 3) | ((lo & 0xF800) >> 9); //The next int to be processed.
   }
   
   data++;

   //printf("data at: %i\n",(int)value);
   //printf("\tvaluehi is: %i\n",valuehi);
   //printf("\tvaluelo is: %i\n",valuelo);
 
   *output++ = valuehi;
   *output++ = valuelo;
 }


}












