Here are JavaScript functions to parse the data from your model.info.txt file based on your requirements:

```javascript
function parseModelInfo(fileContent) {
  const lines = fileContent.split('\n');

  // Model section
  let modelData = {};
  for (const line of lines) {
    if (line.startsWith('Model')) {
      const [name, value] = line.trim().split('        ');
      modelData[name.trim()] = value.trim();
    }
  }

  // Capabilities section
  const capabilitiesData = [];
  for (const line of lines) {
    if (line.startsWith('Capabilities')) {
      capabilitiesData.push(line.trim().split('    ')[1].trim());
    }
  }

  // System section
  let systemData;
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].startsWith('System')) {
      systemData = lines[i].trim();
      break;
    }
  }

  // Parameters section
  const parametersData = {};
  for (const line of lines) {
    if (line.startsWith('Parameters')) {
      const [key, value] = line.split('        ');
      parametersData[key.trim()] = value.trim();
    }
  }

  return {
    model: modelData,
    capabilities: capabilitiesData,
    system: systemData,
    parameters: parametersData,
  };
}

// Usage
const fileContent = `Model
    architecture        granite    
    parameters          2.5B       
    context length      16384      
    embedding length    2048       
    quantization        Q4_K_M     

  Capabilities
    completion    
    tools         
    vision        

  Projector
    architecture        clip       
    parameters          441.86M    
    embedding length    1152       
    dimensions          0          

  Parameters
    num_ctx        16384    
    temperature    0        

  System
    A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful,    
      detailed, and polite answers to the user's questions.                                               

  License
    Apache License               
    Version 2.0, January 2004    
`;

const parsedData = parseModelInfo(fileContent);

console.log('Model:', parsedData.model);
console.log('Capabilities:', parsedData.capabilities);
console.log('System:', parsedData.system);
console.log('Parameters:', parsedData.parameters);
```

This function, `parseModelInfo`, reads the file content line by line and categorizes the data into models, capabilities, system prompt, and parameters based on the section headers. It returns an object with these categorized data.

