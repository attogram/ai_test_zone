 Yes.
- Is everyone else mortal? Maybe.
- Everyone is mortal, but maybe Socrates isn’t.
- In that case, he won’t be able to do anything useful like study the law and solve problems.
- But if you can, then why not have fun with it? Why not write a program to solve some interesting problem that only Socrates is capable of solving? You will also see how important it is to know what kind of problems are amenable for different kinds of people (or even to people of the same personality type).
- When you want to write a program, you have to first figure out which language or programming environment is suitable. This can be difficult and time consuming. It can also be exhausting as there are many languages to choose from. You need to keep in mind that your goal is to build an application that works well for users, not just for yourself. 
- The point here is that you have to know the problem first so that you can find a suitable programming environment or language (and later on, perhaps even which type of program). This makes it easier to choose what kind of software development methodologies to use when you actually build your application. 
- Now let’s talk about how you need to develop the application. It is important that everyone should know how their code works before they start developing. The first step in this direction is for developers to come together and try out each other’s work. This is called coding practice, which means trying different approaches, discussing design alternatives with others, and making sure you understand all the details.
- As a result of these activities, people become more comfortable with their own code and they can share it with others to have a chance for better programming. 
- One of the biggest challenges in software development is that people tend to spend most of their time thinking about what should be done rather than how it should be done. This has led to two trends:
	* The “do first” mantra: You can do something that will work, but you need to try hard to understand the whole thing before you start writing code, or you won’t have enough information at all in your head and then you might waste a lot of time on debugging.
    * Coding best practices: When you write code for software, there are certain practices that you can follow so that it works well for others as well (or better). For example, the use of interfaces in object-oriented languages to decouple objects from each other is very popular among software developers. 

## Chapter 31: Exercises

### Exercise 48

This exercise is about building a “dungeon generator”. You will start by writing a program that generates rooms and corridors, then you will add some rules to make the dungeon more interesting. This exercise is very similar to the previous one but adds a few new features:
- It starts with a list of all possible room sizes (e.g., small, medium, large) and another list of all possible exits that a room can have (i.e., up, down, left, right). 
- Then it generates a random dungeon by first generating the rooms and then adding the corridors between them using the exit directions given in the second list. The number of corridors must match the length of the lists that you use to create the dungeon (i.e., if there are 5 rooms, then you should add 4 corridors).
- Finally, each room needs a name and a description which can be any random text (no need for real descriptions at this stage).

### Exercise 49

This exercise is about adding features to the dungeon generator. You will start with the code from the previous exercise but change it so that the corridors are only allowed between rooms of different sizes and you make sure that all the rooms have a description (e.g., “A small, wooden room”). Then you can also change each exit in one of the directions (e.g., by adding a “secret passage”) or create more exits (e.g., by making it possible for two rooms to be adjacent to each other without any corridor between them).

## Chapter 32: Designing the user interface with JavaFX

This chapter talks about JavaFX as an example of a graphical programming environment that lets you build applications in a similar way as when you use a drawing program like Microsoft Paint or GIMP. You will learn how to create a simple GUI application that does something useful. It is important to note that it is not the only graphical programming environment, and sometimes other options are better for certain types of applications (e.g., for games).
- The main part of this chapter focuses on building your first JavaFX program.
	* First you have to create a GUI project in Eclipse. Then you will add a new “JavaFX Application” as shown in the figure below:
    * After creating the project, you need to include some libraries so that you can actually use JavaFX in your code (e.g., for text or image manipulation). This is done by selecting “Edit > Properties” on the context menu of the project. Then it will open a window where you can see all the settings and libraries for this project:
    * Finally, when you create a new JavaFX application, Eclipse creates three folders that are used to store various resources (e.g., images) required by your program. These folders are called “resource” folders and they have different names according to the type of resources that they contain. In the following figure, the resource folder for images is shown as an example:
- You can use these resource folders in your JavaFX application just like a file system. For example, you can access any image using its path relative to this resource folder (e.g., “/images/myimage.jpg”). If you don’t have a specific resource available, then the best thing to do is to use images that are already available in most programs or download some from the Internet.
- Once you have your resource folders set up correctly, you can start creating user interfaces with JavaFX. You will learn about two types of controls: Controls (e.g., buttons) and Nodes (e.g., images).
    * There are various kinds of nodes that you can add to a GUI application, such as labels or images. These nodes are created using different classes that correspond to the different UI elements that you want your user interface to contain. For example, if you need an image in your program, then you will create an Image class object and set it up with all the necessary settings (e.g., size). Then when you add this node to a JavaFX application, it will be displayed on the screen as shown below:
    * There are also various kinds of controls that you can add to user interfaces so that users can interact with them in different ways. For example, if you need an button for your program then you should create a Button object and set up all the properties (e.g., size) and other settings as needed. Then when you add this node to a JavaFX application it will be displayed on the screen as shown below:
- You can also use various predefined layouts in your applications, such as FlowPane or GridPane, that allow you to arrange different nodes horizontally (e.g., in columns) and vertically (in rows). For example, in the following figure a FlowPane is used to place three images side by side:
- It is also possible to create scroll bars so that users can navigate through your application’s UI easily as shown below:
    * You can set up the appearance of your nodes using CSS style sheets. These are files created with some syntax that allow you to define styles for different types of nodes (e.g., buttons). For example, the following code defines a style sheet that sets the color of all buttons in the application:
- Once this style sheet has been created, it can be used in JavaFX applications by importing it into the project settings using “Import > Existing Resource” from its context menu as shown below:
    * You will learn about CSS styling sheets in more detail later on. For now you need to keep in mind that they are very useful when you want to customize your user interfaces.
- You can also create more complex layouts (e.g., using HBox, VBox, or GridPane) to arrange nodes inside the application as shown below:
    * In this example, we have created a simple UI layout that consists of two images and one label in a FlowPane object which is added to our JavaFX application.
- At this point you can start writing some code for your user interface using these classes. The best thing about JavaFX is that it gives you lots of different ways (or even different programming languages) so that you can create applications quickly and easily. For example, in the following figure, we have written a simple program that prints “Hello World” on the screen:
- In this case, the HelloWorld class has been implemented using an anonymous inner class. This means it is not actually stored as a separate file but rather created within another (e.g., main) class. Note also that the main method in JavaFX programs doesn’t return anything and so there are no “main” methods in JavaFX applications because they don’t have one or more GUI elements inside them, which means that your application is just a collection of code that runs without any visual output to the screen:
- The first thing you need to do when writing a JavaFX program is define all the libraries that are required for it (e.g., JavaFX itself), import these libraries and use their classes in the main class so that your application actually works correctly by creating some user interface elements, etc. You will learn about this later on.
- There can be various types of nodes that you need to add to your program depending on what kind of application it is (e.g., an image, a button or text). JavaFX allows for many different kinds of nodes and controls so there’s no point in learning everything at once – just learn the most important ones so that you can be productive with the rest later on:
    * The Button class lets users interact with your application by clicking them using either mouse, touch screen or keyboard. This can be done by adding a listener (i.e., method) to it as shown below:
- By setting up the style and other properties of this button you will make sure that it is displayed in a way similar to all buttons on your user interfaces. In addition to defining the properties, you also need to add an action when clicking the button so that users can actually do something (e.g., clicking this button opens a new window or closes it). You do this by adding another listener method for the click event:
- The image nodes allow you to display images in your user interfaces without needing to specify their sizes. In addition to defining properties such as width and height, you can also set up a listener that gets called when an image is clicked (i.e., it can do something). For example, if we want to open the picture of <NAME> when it is clicked then we simply need to add another click event listener method:
- The Label class lets users create text nodes in your user interfaces using a different approach than what you learned about before so that they don’t have to worry too much about their appearance. You can learn more about the Label node and how to use it on page 607. There are also some predefined styles (e.g., bold, italic) for labels that you can use as needed:
- The TextInputControl class is a control similar to the Button class but allows users to type text in it instead of clicking it. For example, if we want to create an input box where we ask the user what their name is and then store this value in a variable (e.g., name), then we can use the following code:
- This will add a label to our application as well as an input field that users can type into it. The important thing about using Label and TextInputControl together is to remember not to put any user interface elements inside these nodes because they are special in that you should only use them for the text and nothing else:
- In addition to defining all properties of a control or node, you also need to add event listeners so that your program actually responds to events (e.g., clicking this button should open another window). For example, if we want to add an action when the user has typed in his name then it is possible by adding another listener method:
- The ComboBox class allows users to choose from a list of predefined options which can be set up using a list or array. This control is useful for creating different menus that can let users make a choice rather than typing any text manually into the input field (e.g., they don’t have to type in “small”). You can learn more about ComboBox and how to use it on page 608. For example, if we want to create an application where our user selects a small or large room size from a dropdown menu then we can add the following code:
- Here you can see that it is possible to define all styles for this control using style sheets as well so that users will be able to choose their own appearance. For example, if you want the text in your drop-down list to be italic and have a different font size then you can use CSS styling for this:
- The CheckBox class allows users to select or deselect an option (e.g., checkbox “big room” is selected) so that they can make a choice about the size of rooms that are generated in your application. For example, if we want our user to be able to choose between generating small or big rooms then we can use this class:
- The ToggleButton class works similarly as the CheckBox but it allows users to switch between two states (e.g., it is possible for users to generate smaller or bigger rooms). For example, if we want our users to be able to generate both medium and large rooms in their dungeon then we can use this:
- The Slider class is a control that allows users to choose from a range of numbers by moving the slider handle around on screen. This can be used for creating settings where you might want users to adjust some parameter of your application (e.g., how often you create new rooms). For example, if we want our user to have the ability to set the frequency of room generation then we can use this control:
- The ProgressBar class is another control that allows us to show a progress bar on screen which indicates how much work is left in an operation (e.g., generating all corridors between rooms). For example, if we want our user to see a progress bar that shows the percentage of corridors generated then we can use this:
- JavaFX also allows us to draw shapes onto the screen using different classes such as Rectangle and Circle (see figure below):
    * In addition to drawing these shapes you can control their properties (e.g., color, width, height). For example, if we want our user to be able to choose between generating walls or corridors then we could use this:
- The Slider class lets users move a slider on screen which is used to change some parameter of the application (see figure below):
    * Another control that you can use for drawing shapes onto your screens is the Shape3D node. For example, if our user wants to draw a 3D character model then we could do this using the following code:
- Once all these controls have been created and put inside the layout of your application, you can start writing some code that uses them in order to create a working graphical interface for it (e.g., generating rooms and corridors). The best thing about JavaFX is that it gives you lots of different ways so that you can easily create user interfaces quickly without learning too much at once – just learn the most important ones, then come back later on to get more information about other controls:
    * The GridPane class lets you place nodes in rows and columns. This is useful if you want some specific nodes to appear next to each other horizontally (e.g., in a column) or vertically (in a row). For example, if we want our user interface to consist of the image of Socrates with two buttons that open a window for generating corridors between rooms and another one to close it, then we can use this:
- In addition to adding nodes inside GridPane using various methods such as add() or set(), you can also define constraints (e.g., hgap=5) so that all the rows/columns have a specific amount of space between them to make sure they are not too close together and there is some space on both sides of them to separate them from each other:
- Finally, JavaFX allows us to create scroll bars for our user interfaces so that users can easily navigate through it. For example, if we want the user to be able to scroll through all the rooms in a list (or a grid) then we need to add these controls to our user interface as shown below:
- You can learn more about GridPane and how to use it on page 610. In addition to this you could also create your own layout classes using JavaFX. For example, if we want our UI to have a scroll bar for the list of rooms that are generated then we could do this by creating our own class:
- You can start writing some code in the main method so that it generates new rooms and corridors depending on the user’s choices (e.g., how big they should be, where they can go to). For example, if we want our user to be able to choose between generating small or large rooms then we could create a conditional statement:
- You might also want your users to see some information about the room that he/she is currently editing so that they can have an idea of how big it should be and what kind of exits are possible from there. For example, if you want users to be able to open up each room in his/her dungeon then we could add a listener for clicking on any node (room) that has been added as shown below:
- Once this is done the only thing left to do when creating your user interface is to create and add event listeners. This can be done using code similar to what you already wrote earlier so that it actually responds to actions of users such as clicking on each room (i.e., opening up its description), etc:
- After all these steps have been completed then everything should work correctly so that the user is able to choose a small or large room size, generate rooms and corridors between them according to their choices by using various controls like CheckBoxes, ComboBoxes, Buttons, TextInputControls (e.g., for entering room names), etc:
- You will learn more about how to create an application using JavaFX in Chapter 33 so that you can start implementing your ideas and try them out in practice. However, there is one important note here:
    * This is just a simple example of how to use various controls in order to build an application. In addition to this, it should be noted that you don’t have to use JavaFX for the 911 

111111111111111111111111111110000000000000000000000000000000

