Certainly! Below is a simple PHP function that takes an array as input and outputs an HTML unordered list (`<ul>`) containing the elements of the array.

```php
<?php
function arrayToHtmlList($array) {
    if (!is_array($array) || empty($array)) {
        return ''; // Return empty string if input is not a non-empty array
    }

    $html = '<ul>';
    foreach ($array as $item) {
        $html .= '<li>' . htmlspecialchars($item, ENT_QUOTES, 'UTF-8') . '</li>';
    }
    $html .= '</ul>';

    return $html;
}

// Example usage:
$items = array('Apple', 'Banana', 'Cherry');
echo arrayToHtmlList($items);
?>
```

### Explanation:

1. **Function Definition**: The function `arrayToHtmlList` is defined to take a single parameter `$array`.

2. **Input Validation**: 
   - It checks if the input is an array and if it's not empty.
   - If the input is not valid, it returns an empty string.

3. **HTML List Construction**:
   - The function initializes an HTML unordered list (`<ul>`) by starting with `<ul>` and ending with `</ul>`.
   - It then iterates over each element in the array using a `foreach` loop.
   - For each element, it creates a list item (`<li>`) and uses `htmlspecialchars` to escape any special characters (e.g., `<`, `>`, `&`) in the items. This ensures that the output is safe to use in HTML without causing security issues like XSS.

4. **Output**: The function returns the complete HTML list as a string.

### Example Usage:

The example usage at the end demonstrates how to call the function with an array of fruits and outputs the resulting HTML unordered list.

You can modify this function further if you need additional features such as ordered lists, custom list item classes, or different wrapping tags.

