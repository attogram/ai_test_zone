, &mut lo)?;
                hi = (hi << 4) | ((lo >> 4) as u32);
                *s += hi;
            }

            for s in data {
                *s <<= 1;
            }
        };

        let mut h: u64;
        let mut k: u8;
        let mut m: &mut [u8];

        h = (length_hi as u64) << 32 | length_lo as u64;

        for i in 0..(self.rounds - 1) {
            f();
            self.state[i] ^= h >> 59 | h << 37;
        }

        f();
        h = (h & 0x1ffffffffffffff) ^ 0x80200c28u64;

        for i in ((self.rounds - 1)..(self.rounds + 16)) {
            self.state[i] ^= h >> 59 | h << 37;
        }

        m = &mut output[..];

        for i in (0..(self.rounds / 2)).rev() {
            k = 0;

            for j in 0..8 {
                let idx: usize = ((i * 16) + j) as usize;

                k ^= self.state[idx] & (self.state[(idx + 15) % 32] ^ self.state[(idx + 14) % 32]);
            }

            m[(i * 8)] = ((k >> 0) & 0xff) as u8;
            m[(i * 8) + 1] = ((k >> 8) & 0xff) as u8;
            m[(i * 8) + 2] = ((k >> 16) & 0xff) as u8;
            m[(i * 8) + 3] = ((k >> 24) & 0xff) as u8;
        }

        Ok(())
    }

    pub fn digest(&self, output: &mut [u8]) {
        self.digest_helper(output).unwrap()
    }
}


