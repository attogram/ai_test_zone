
Here's a refactored version of the function that reads the `$statsFile` directly and outputs the values into the index file without using an intermediate array:
```bash
function addModelToIndexFile {
  model=$1
  modelFile=$2
  statsFile=$3
  indexFile=$4

  # read response words and bytes from the model file
  responseWords=$(wc -w < "$modelFile")
  responseBytes=$(wc -c < "$modelFile")

  (
    echo "<tr><td class='left'><a href='./$model.html'>$model</a></td><td>${responseWords}</td><td>${responseBytes}</td>"

    # read and output the stats values from the stats file
    while read -r line; do
      value=$(echo "$line" | cut -d ':' -f2)
      if [[ -n "$value" ]]; then
        echo "<td>${value}</td>";
      fi
    done < "$statsFile"

    echo "</tr>"
  ) >> "$indexFile"
}
```
This version of the function takes the same parameters as before, but it reads the response words and bytes directly from the `$modelFile`, rather than from an array. It also uses a `while read` loop to read the lines from the `$statsFile` and output the stats values directly into the index file, without using an intermediate array.

Note that this refactored version assumes that the format of the `$statsFile` is consistent with the previous version, i.e., that each line consists of a key-value pair separated by a colon (`:`) character, and that the value for each key is the second field in the line (i.e., the part after the first `:`). If this assumption does not hold, then you may need to modify the code accordingly.

