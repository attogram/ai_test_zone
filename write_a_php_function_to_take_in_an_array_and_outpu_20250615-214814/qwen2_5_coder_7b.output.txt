Certainly! Below is a simple PHP function that takes an array as input and outputs an HTML unordered list (`<ul>`) containing each element of the array wrapped in `<li>` tags.

```php
<?php

function arrayToHtmlList($array) {
    // Start the unordered list
    $html = '<ul>';

    // Loop through each element in the array
    foreach ($array as $item) {
        // Append each item to the list
        $html .= '<li>' . htmlspecialchars($item) . '</li>';
    }

    // Close the unordered list
    $html .= '</ul>';

    return $html;
}

// Example usage:
$myArray = ['Apple', 'Banana', 'Cherry'];
echo arrayToHtmlList($myArray);

?>
```

### Explanation:
1. **Function Definition**: The function `arrayToHtmlList` takes one parameter, `$array`, which is expected to be an array.
2. **HTML List Initialization**: The function initializes the HTML output as an unordered list (`<ul>`).
3. **Loop Through Array**: It uses a `foreach` loop to iterate over each element in the array.
4. **Escape Special Characters**: For security reasons, the `htmlspecialchars` function is used to escape any special characters in the array elements to prevent XSS (Cross-Site Scripting) attacks.
5. **Create List Items**: Each item from the array is wrapped in an `<li>` tag and appended to the HTML string.
6. **Close List**: The unordered list is closed with `</ul>`.
7. **Return Output**: Finally, the function returns the complete HTML string representing the list.

### Example Usage:
The example usage at the end of the script demonstrates how to call the function and output the resulting HTML list. In this case, it will generate an HTML list with items "Apple", "Banana", and "Cherry".

You can modify the `$myArray` variable with different arrays to see the different outputs.

