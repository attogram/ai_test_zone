Certainly! Below is a bash function that parses the `model.info.txt` file according to your specifications:

```bash
parse_model_info() {
    # Initialize variables and arrays
    declare -A modelParams
    capabilities=()
    systemPrompt=""

    # Read the file line by line
    while IFS= read -r line; do
        # Trim leading/trailing whitespace
        line=$(echo "$line" | xargs)

        # Check for Model section
        if [[ "$line" == "Model" ]]; then
            continue
        elif [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)[[:space:]]+([^[:space:]]+) ]]; then
            modelParams[${BASH_REMATCH[1]}]="${BASH_REMATCH[2]}"
        fi

        # Check for Capabilities section
        if [[ "$line" == "Capabilities" ]]; then
            continue
        elif [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)$ ]]; then
            capabilities+=("${BASH_REMATCH[1]}")
        fi

        # Check for System section
        if [[ "$line" == "System" ]]; then
            continue
        elif [[ -n "$systemPrompt" ]]; then
            systemPrompt+=" $line"
        else
            systemPrompt="$line"
        fi

        # Check for Parameters section
        if [[ "$line" == "Parameters" ]]; then
            continue
        elif [[ "$line" =~ ^[[:space:]]*([a-zA-Z0-9_]+)[[:space:]]+([^[:space:]]+) ]]; then
            if [[ "${BASH_REMATCH[1]}" == "temperature" ]]; then
                modelParams[${BASH_REMATCH[1]}]="${BASH_REMATCH[2]}"
            fi
        fi
    done < "model.info.txt"

    # Output the results
    echo "Model Parameters:"
    for key in "${!modelParams[@]}"; do
        echo "$key=\"${modelParams[$key]}\""
    done

    echo "Capabilities:"
    printf "%s\n" "${capabilities[@]}"

    echo "System Prompt:"
    echo "$systemPrompt"

    echo "Temperature: ${modelParams[temperature]}"
}

# Call the function to parse the model.info.txt file
parse_model_info
```

### Explanation:
1. **Initialization**: We initialize an associative array `modelParams` to store the key-value pairs from the Model and Parameters sections, a bash array `capabilities` to store the keywords from the Capabilities section, and a variable `systemPrompt` to store the lines from the System section.

2. **Reading File Line by Line**: The script reads the file line by line using a while loop. It trims any leading or trailing whitespace from each line.

3. **Section Identification**: The script checks if the current line starts with "Model", "Capabilities", "System", or "Parameters". If it does, it skips to the next line.

4. **Parsing Model and Parameters Sections**:
   - For lines in the Model and Parameters sections that match the pattern `name value`, it extracts the name and value using a regular expression and stores them in the associative array.
   
5. **Parsing Capabilities Section**:
   - Each keyword in the Capabilities section is added to the bash array.

6. **Parsing System Section**:
   - The lines from the System section are concatenated into a single variable, preserving any multi-line content.

7. **Output**: The script prints out the parsed values for each section and the specific 'temperature' value.

### Usage:
1. Save the function in a bash script or source it in your current shell session.
2. Ensure `model.info.txt` is in the same directory as the script or provide the correct path to the file.
3. Call the `parse_model_info` function to execute the parsing logic.

This function should correctly parse the provided example `model.info.txt` and output the results accordingly.

