
To create a PHP function that takes an array and outputs an HTML unordered list of its contents, we can follow a structured approach. The function should:

1. **Validate Input**: Ensure the input is an array.
2. **Generate HTML**: Use a loop to iterate through the array elements and generate `<li>` tags.
3. **Wrap in `<ul>`**: Enclose the list within a `<ul>` tag for proper HTML structure.
4. **Output the Result**: Use `echo` to output the generated HTML, which will be displayed in the browser or used elsewhere.

Here is the complete and well-documented PHP function:

```php
<?php
function createHtmlList($array) {
    // Check if the input is an array
    if (!is_array($array)) {
        return "Invalid input: must be an array";
    }

    // Start the unordered list
    echo '<ul>';

    // Loop through each element in the array
    foreach ($array as $item) {
        // Output each list item as a <li> tag
        echo '<li>' . htmlspecialchars($item) . '</li>';
    }

    // Close the unordered list
    echo '</ul>';
}
?>
```

---

### Example Usage

```php
$fruits = ['apple', 'banana', 'cherry'];
createHtmlList($fruits);
```

This would output:

```html
<ul>
<li>apple</li>
<li>banana</li>
<li>cherry</li>
</ul>
```

---

### Notes

- **Security**: `htmlspecialchars()` is used to prevent XSS vulnerabilities when outputting user-generated content.
- **Error Handling**: The function returns a string if the input is not an array, allowing for further processing or error handling.
- **Flexibility**: The function works with any type of array elements (strings, numbers, objects, etc.).

This implementation is simple, efficient, and adheres to PHP best practices.
