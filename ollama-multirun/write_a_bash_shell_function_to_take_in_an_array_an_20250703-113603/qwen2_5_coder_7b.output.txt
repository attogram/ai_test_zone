Certainly! Below is a Bash shell function that takes an array as input and outputs an HTML list of its contents:

```bash
#!/bin/bash

# Function to create an HTML list from an array
create_html_list() {
    # Check if an array was passed
    if [ $# -eq 0 ]; then
        echo "Error: No array provided."
        return 1
    fi

    # Initialize the HTML list
    local html_list="<ul>"

    # Loop through each element in the array and add it to the list
    for item in "$@"; do
        html_list+="<li>$item</li>"
    done

    # Close the list
    html_list+="</ul>"

    # Output the HTML list
    echo $html_list
}

# Example usage:
my_array=("Apple" "Banana" "Cherry")
create_html_list "${my_array[@]}"
```

### Explanation:
1. **Function Definition**: The function `create_html_list` is defined to accept an arbitrary number of arguments.
2. **Array Check**: It checks if any arguments were passed. If not, it prints an error message and returns with a non-zero status.
3. **Initialize HTML List**: The variable `html_list` is initialized with the opening `<ul>` tag.
4. **Loop Through Array**: The function loops through each element in the array using a for loop and appends each element wrapped in `<li>` tags to `html_list`.
5. **Close List**: After the loop, the closing `</ul>` tag is appended to complete the HTML list.
6. **Output HTML List**: Finally, the function prints the completed HTML list.

### Example Usage:
To use this function, you would define an array and pass it as arguments to the function:

```bash
my_array=("Apple" "Banana" "Cherry")
create_html_list "${my_array[@]}"
```

This will output:
```html
<ul>
<li>Apple</li>
<li>Banana</li>
<li>Cherry</li>
</ul>
```

You can use this function in any Bash script to dynamically generate an HTML list from an array.

