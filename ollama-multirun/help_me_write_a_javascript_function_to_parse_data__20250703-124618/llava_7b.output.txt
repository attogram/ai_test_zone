 Here is a JavaScript function that parses the data from the provided model.info.txt file according to your requirements:
```javascript
function parseModelInfo(modelInfoText) {
  // Regular expressions for extracting information from the text file
  const modelRegex = /name\s+value\n([^\s]+)\s+(.*)/gm;
  const capabilitiesRegex = /Capabilities\n([^\s]+)/g;
  const systemRegex = /System\n([^\s]+)/;
  const parametersRegex = /Parameters\n(temperature)\s+value\n([^\s]+)/gm;

  // Parse the model section and save the values as JavaScript variables
  let architecture, contextLength, embeddingLength, quantization;
  while (match = modelRegex.exec(modelInfoText)) {
    const [, name, value] = match;
    if (name === 'architecture') architecture = value;
    else if (name === 'context length') contextLength = value;
    else if (name === 'embedding length') embeddingLength = value;
    else if (name === 'quantization') quantization = value;
  }

  // Parse the capabilities section and save the values as an array
  let capabilities = [];
  while (match = capabilitiesRegex.exec(modelInfoText)) {
    capabilities.push(match[1]);
  }

  // Parse the system section and save it as a variable
  let systemPrompt;
  if (match = systemRegex.exec(modelInfoText)) {
    systemPrompt = match[1];
  }

  // Parse the parameters section and save the temperature value
  let numCtx, temperature;
  while (match = parametersRegex.exec(modelInfoText)) {
    const [, , value] = match;
    if (value === 'num_ctx') numCtx = value;
    else if (value === 'temperature') temperature = value;
  }

  // Return the parsed data as an object
  return {
    architecture,
    contextLength,
    embeddingLength,
    quantization,
    capabilities,
    systemPrompt,
    numCtx,
    temperature
  };
}
```
You can call this function by passing the contents of the model.info.txt file as a string parameter:
```javascript
const modelInfoText = `Model
  architecture        granite    
  parameters          2.5B       
  context length      16384      
  embedding length    2048       
  quantization        Q4_K_M     

Capabilities
  completion    
  tools         
  vision        

Projector
  architecture        clip       
  parameters          441.86M    
  embedding length    1152       
  dimensions          0          

Parameters
  num_ctx        16384    
  temperature    0        

System
  A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful,    
    detailed, and polite answers to the user's questions.                                                   

License
  Apache License               
  Version 2.0, January 2004    
  ...`;
const parsedModelInfo = parseModelInfo(modelInfoText);
console.log(parsedModelInfo);
// Output:
// {
//   architecture: "granite",
//   contextLength: "16384",
//   embeddingLength: "2048",
//   quantization: "Q4_K_M",
//   capabilities: ["completion", "tools", "vision"],
//   systemPrompt: "A chat between a curious user and an artificial intelligence assistant. The assistant gives helpful,     detailed, and polite answers to the user's questions.",
//   numCtx: "16384",
//   temperature: "0"
// }
``` 

