
To solve this problem, we need to process a given content (which is similar to the `model.info.txt` file) according to specific rules. The goal is to extract variable values, collect capability information, handle parameters with temperature, and create an array of these parameters.

### Approach
1. **Extract Variables**: Each line starting with "name" followed by space(s) contains a key-value pair where the key is derived from the part after "name". We will assign each value to its respective variable.
2. **Collect Capabilities**: After extracting variables, we collect other lines that do not start with "Model", "Parameters", or "System".
3. **Handle Parameters**: Lines starting with "parameters" might contain temperature values which are extracted and stored in a specific format.

### Solution Code
```python
def process_model_info(content):
    lines = content.strip().split('\n')
    
    variables = {}
    parameters_temp = 0.0
    
    for line in lines:
        if 'name' in line:
            parts = line.split()
            name_part = parts[1]
            try:
                value_str = ' '.join(parts[2:])
                value = float(value_str)
                variables[name_part] = f'{name_part}={value}'
            except ValueError:
                pass
    
    for line in lines:
        if not any(word.startswith('Model') or word.startswith('Parameters') or word.startswith('System') for word in line.split()):
            parts = line.split()
            var_name = ' '.join(parts[:1])
            value_str = ' '.join(parts[1:])
            try:
                value = float(value_str)
                variables[var_name] = f'{var_name}={value}'
            except ValueError:
                pass
    
    # Collect parameters
    parameters_list = []
    for line in lines:
        if any(word.startswith('Parameters') or word.startswith('System') for word in line.split()):
            parts = line.split()
            key_part = ' '.join(parts[:1])
            value_str = ' '.join(parts[1:])
            try:
                value = float(value_str)
                parameters_list.append(f'{key_part}={value}')
            except ValueError:
                pass
    
    # Collect variables
    variable_names = list(variables.keys())
    
    return {
        'variables': [f"{k}={v}" for k, v in variables.items()],
        'capabilities': [],
        'parameters': parameters_list,
        'variable_names': variable_names
    }

# Example usage:
# content = "Model name value\nsomething else"
# result = process_model_info(content)
```

### Explanation
1. **Reading Lines**: The content is split into individual lines to process each part separately.
2. **Extracting Variables**: Each line starting with "name" is processed to extract the variable key and its corresponding value, which are stored in a dictionary called `variables`.
3. **Handling Parameters**: After extracting variables from lines starting with "name", other relevant information (like parameters) is extracted based on their structure.
4. **Collecting Results**: The results include both text strings for capabilities and arrays for specific parameter values.

This approach ensures that we correctly process each part of the content according to the given rules, resulting in a structured and organized output.
