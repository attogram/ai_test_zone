Thinking...
Okay, I need to write a JavaScript function that takes an array and outputs an HTML list of its contents. Let me think about how to approach this.

First, the function should accept an array as an argument. Let's call it 'items'. Then, I need to convert each element of this array into a list item. So, for each element in the array, I'll create a <li> tag.

Wait, how do I loop through the array? Using a loop like for...of or map? Maybe using a loop is more straightforward. Let me think. If I use a loop, I can iterate over each element and append a <li> for each.

So, maybe I can create a new HTML string by concatenating all the <li> tags. For example, if the array is [1, 2, 3], the HTML would be <ul><li>1</li><li>2</li><li>3</li></ul>.

But how to build this string in JavaScript. Maybe using a loop and collecting the HTML parts into a variable.

Alternatively, using the map method to create an array of HTML strings and then join them with '<li>' and '</li>'.

Wait, let's think. If I have an array like ['apple', 'banana', 'cherry'], then using map would create ['<li>apple</li>', '<li>banana</li>', '<li>cherry</li>'], then joining them with '' would give the full HTML.

So, the function could be something like:

function createList(items) {
  return items.map(item => `<li>${item}</li>`).join('');
}

But then, I need to wrap this in a <ul> tag. Oh right, the user wants an HTML list, so the function should return the entire HTML string. So, the function would return a string that starts with <ul> and ends with </ul>, with the list items in between.

So, combining all that, the function would be:

function createList(items) {
  return '<ul>' + items.map(item => `<li>${item}</li>`).join('') + '</ul>';
}

Wait, but what if the array is empty? Well, the function would return an empty ul, which is correct. Also, if the array has elements, it would generate the list properly.

Let me test this with an example. If items is [1, 2, 3], the output would be <ul><li>1</li><li>2</li><li>3</li></ul>. That looks right.

But maybe the user wants the list to be within a <ul> tag. So the function is correct.

So the function is straightforward. It takes the array, maps each element to a <li> tag, joins them with nothing (so they are adjacent), and wraps them in a <ul> tag. Then returns that string.

I think that's the solution. Let me write the code accordingly.
...done thinking.

To create a JavaScript function that takes an array and outputs an HTML list of its contents, we can follow a simple and efficient approach. The function will:

1. Accept an array of elements.
2. Map each element to a `<li>` (list item) tag.
3. Join all the `<li>` tags into a single string.
4. Wrap the resulting list in a `<ul>` (unordered list) tag.
5. Return the complete HTML string.

Here's the implementation:

```javascript
function createList(items) {
  return '<ul>' + items.map(item => `<li>${item}</li>`).join('') + '</ul>';
}
```

---

### Example Usage:

```javascript
const fruits = ['apple', 'banana', 'cherry'];
const htmlList = createList(fruits);
console.log(htmlList);
```

This will output:

```html
<ul><li>apple</li><li>banana</li><li>cherry</li></ul>
```

---

### Notes:

- The function handles empty arrays gracefully by returning an empty `<ul>`.
- It uses the `map()` method to generate list items and `join('')` to ensure they are adjacent.
- The `<ul>` tag is properly closed with `</ul>` to form a complete HTML unordered list.

This solution is clean, concise, and leverages JavaScript's built-in array methods for simplicity.

