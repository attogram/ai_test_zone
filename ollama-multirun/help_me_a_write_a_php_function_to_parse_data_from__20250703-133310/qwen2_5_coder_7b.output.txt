To parse the `model.info.txt` file using PHP, you can create a function that reads the file, processes each section according to the provided rules, and stores the parsed data in appropriate variables or arrays. Below is an example of how you could implement this:

```php
<?php

function parseModelInfo($filePath) {
    $data = [
        'model' => [],
        'capabilities' => [],
        'systemPrompt' => null,
        'parameters' => null,
        'architecture' => null,
        'embeddingLength' => null,
        'temperature' => null
    ];

    $sections = [
        'Model',
        'Capabilities',
        'System',
        'Parameters'
    ];

    $currentSection = null;

    if (!file_exists($filePath)) {
        throw new Exception("File does not exist.");
    }

    $lines = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

    foreach ($lines as $line) {
        // Check for section headers
        if (in_array(trim($line), $sections)) {
            $currentSection = trim($line);
            continue;
        }

        switch ($currentSection) {
            case 'Model':
                list($key, $value) = explode('    ', trim($line));
                $data['model'][$key] = trim($value);
                if ($key === 'architecture') {
                    $data['architecture'] = trim($value);
                }
                if ($key === 'embedding length' || $key === 'embedding_length') {
                    $data['embeddingLength'] = trim($value);
                }
                break;

            case 'Capabilities':
                $data['capabilities'][] = trim($line);
                break;

            case 'System':
                if (is_null($data['systemPrompt'])) {
                    $data['systemPrompt'] = trim($line);
                } else {
                    $data['systemPrompt'] .= ' ' . trim($line);
                }
                break;

            case 'Parameters':
                list($key, $value) = explode('    ', trim($line));
                if ($key === 'temperature') {
                    $data['parameters']['temperature'] = floatval(trim($value));
                }
                break;
        }
    }

    return $data;
}

// Example usage
$filePath = 'path/to/model.info.txt';
$modelData = parseModelInfo($filePath);

print_r($modelData);
?>
```

### Explanation:

1. **Initialization**:
   - The `parseModelInfo` function initializes an array `$data` to store the parsed information.
   - It also defines an array `$sections` containing the expected section headers.

2. **Reading and Processing Lines**:
   - The function reads the file line by line using `file()`.
   - It checks each line to see if it matches any of the defined sections.
   - Depending on the current section, it processes the line accordingly:
     - For the 'Model' section, it splits the line into a key-value pair and stores them in the `$data['model']` array. Special cases for `architecture`, `embedding length`, and `temperature` are handled separately.
     - For the 'Capabilities' section, each line is added to the `$data['capabilities']` array as an element of an array.
     - For the 'System' section, lines are concatenated into a single string stored in `$data['systemPrompt']`.
     - For the 'Parameters' section, only the `temperature` value is extracted and stored.

3. **Return**:
   - The function returns the parsed data as an associative array `$modelData`.

4. **Example Usage**:
   - Replace `'path/to/model.info.txt'` with the actual path to your `model.info.txt` file.
   - The parsed data will be printed using `print_r()`.

This script should handle the parsing of the provided example content and can be extended or modified as needed for different formats or additional sections.

