
Here’s a JavaScript function that converts an array into an HTML unordered list (`<ul>`), escaping any potentially harmful characters to prevent XSS attacks:

```javascript
function arrayToHtmlList(arr) {
  // Validate input is an array
  if (!Array.isArray(arr)) throw new Error("Input must be an array");

  // Escape special HTML characters in each element
  const escapeHtml = (unsafeString) => 
    unsafeString.replace(/[&<>"']/g, c => ({
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '\"': '&quot;',
      "'": '&#39;'
    }[c]));

  // Convert each element to a string and escape it
  const escapedItems = arr.map(item => 
    typeof item === 'string' ? escapeHtml(item) : String(item));

  return `<ul>${escapedItems.map(e => `<li>${e}</li>`).join('')}</ul>`;
}
```

### Explanation:
1. **Input Validation**: Checks if the input is an array using `Array.isArray()`.
2. **HTML Escaping**: Uses a helper function (`escapeHtml`) to replace characters like `<`, `>`, and `"` with their corresponding HTML entities (e.g., `&lt;`, `&gt;`). This ensures user-generated content doesn’t break the HTML or cause security issues.
3. **Conversion & Mapping**:
   - For strings, escape them directly.
   - For other types, convert to a string first using `String(item)`.
4. **List Generation**: Wraps the escaped elements in `<ul>` and `<li>` tags.

### Example Usage:
```javascript
const fruits = ["apple", "banana", "<div>danger</div>", 123];
console.log(arrayToHtmlList(fruits));
```

**Output:**
```html
<ul>
  <li>apple</li>
  <li>banana</li>
  <li>&lt;div&gt;danger&lt;/div&gt;</li>
  <li>123</li>
</ul>
```

### Security Note:
- Escaping is done only for the `string` conversion, so if an array contains objects (e.g., `{ name: "John" }`), they’ll be converted to `[object Object]`, which may still contain unsafe characters. Use this function with caution when dealing untrusted data!
