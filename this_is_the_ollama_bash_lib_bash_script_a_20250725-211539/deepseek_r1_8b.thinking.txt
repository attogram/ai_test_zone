We are going to review the provided Ollama Bash Lib script.

 The goal is to improve this library by making it more robust, adding proper error handling, and ensuring best practices in bash scripting.

 Let's break down the issues:

 1. Missing shebang for executable permission? (It's set with `#!/usr/bin/env bash`)
 2. The functions do not check if they are sourced or executed.
 3. Some functions use command substitution without proper error handling (e.g., safeJson, ollamaListArray).
 4. There is a TODO in every function about checking the response for errors/success.
 5. Debugging: We have a debug function that outputs to stderr when OLLAMA_BASH_LIB_DEBUG=1. However, note that some functions use `curl -s` which silences curl's output (including error messages). This is not good practice because if there's an error we wouldn't know about it unless the user sets DEBUG.
 6. The safeJson function does not check for errors in jq or command substitution. We should return an error code and capture the output appropriately.

 Let's go through each function and propose improvements:

 - debug: This is okay, but note that we are using `echo -e` which interprets backslashes. We might want to avoid interpreting escape sequences if the input can contain them.
   However, in this context, it's acceptable because the messages from the functions are controlled.

 - ollamaIsInstalled: This function uses `command -v` and checks for an empty string. It returns 0 or 1 appropriately. We should keep that.

 - safeJson: This function is intended to escape a string for JSON. However, it does not capture errors. Also, note that the usage says "Output: quoted safe json value", but currently we are just printing and returning success.
   We should change this so that it returns an error if jq fails or if the input contains invalid characters (though Ollama API might handle some). But for now, let's at least capture the exit code of jq.

 - ollamaApiGet: This uses curl but does not check the response. Also, note that we are using `-s` to suppress output and error messages. We should consider having a way to capture errors (like non-zero return from curl) or use `curl --silent` which is equivalent.
   However, since we don't want to change the behavior of suppressing output, but still need to know if there was an error, we can check the exit code.

 - ollamaApiPost: Similarly, does not capture errors. We should return based on curl's exit code.

 But note: The script uses `curl -s` which suppresses progress and error messages. This is a problem because then we don't see any output if there's an error (unless set -e is used). However, the functions are designed to not show errors but just return 0 or 1.

 We have two options:
   Option A: Change all curl commands to check their exit code and return appropriately.
   Option B: Use a wrapper function that captures both stdout and stderr for curl and checks them.

 Let's go with Option A because it is simpler and we can change the functions to:

   ollamaApiGet() {
     local url=$1
     debug "ollamaApiGet: $url"
     if ! curl -s -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' > /dev/null 2>&1; then
        return $RETURN_ERROR
     fi
     return $RETURN_SUCCESS
   }

 However, note that the original functions also capture the output for some commands (like ollamaGenerate). We must be consistent.

 Also, note that in `ollamaClearModel` we are using:
   response=$(ollamaApiPost "/api/generate" "{\"model\": \"$1\", \"keep_alive\": 0}")

 But our improved ollamaApiPost would not capture the output because it returns based on curl's exit code and doesn't return the body.

 We have two types of API calls: those that require the response body (like generate) and those that don't (like list, version). 

 Let's reconsider:

   The functions `ollamaClearModel`, `ollamaGenerate`, etc. are using `ollamaApiPost` or `ollamaApiGet` to get a result and then use it.

 We need to change the API functions so they return 0 on success (with the body) and non-zero on error, but without changing the behavior for commands that expect just an exit code?

 Alternatively, we can split the API calls into two types:

   - Functions that are meant to be called only by internal library functions and require proper checking of curl's response.
   - Functions that are user-facing (like ollamaList) which should output as they do now.

 But note: The script has both cli and json versions. We want consistency in error handling for the API calls, but also we don't want to break existing functionality too much.

 Let's try a different approach:

   For functions that are meant to return an exit code (like ollamaIsInstalled) and output as side effect, they can use curl without checking the response? No, because sometimes it might fail.

   We should change all API functions (ollamaApiGet, ollamaApiPost) to check for errors in curl. Since we are using `-s` to suppress output, we must capture stderr or just rely on exit code?

   The original `curl -s` redirects stdout and silences stderr by default when running without redirection? Actually, with `-s`, curl's standard error is still visible unless redirected.

   We can do:

     ollamaApiGet() {
       local url=$1
       debug "ollamaApiGet: $url"
       if ! curl -s -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' ; then
         return $RETURN_ERROR
       fi
     }

   But note that the original function does not capture any output. It just returns success.

   However, in `ollamaGenerate` we are capturing the response and using it as a string. So we must change:

     ollamaApiPost() {
        local url=$1
        local data=$2
        debug "ollamaApiPost: $url, with data"
        if ! curl -s -X POST "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d "$data"; then
          return $RETURN_ERROR
        fi
     }

   But wait, the `ollamaGenerate` function expects to capture the output of ollamaApiPost and use it. So we must change the way these functions are called.

   We can do two things:

   1. Change all API functions (like ollamaApiGet) to return the response body or an error string, but then they become more complex because we have to handle JSON responses.

   2. Alternatively, we can leave the API functions as simple wrappers and only check for errors in the library function that uses them.

   But note: The TODOs are asking for checking the response for error/success. Currently, none of these checks are done.

   Let's consider making a separate set of functions (like `ollama_api_get_with_check`) but we don't want to break existing usage.

   Alternatively, we can change the library design:

     We have two types of API calls:
        - Those that return a JSON object and expect it.
        - Those that just need to know if the request succeeded.

   However, without knowing the Ollama API response structure (we don't have documentation for errors), we cannot check properly.

   But note: The curl command is being used with `-s` which means no output. We are not capturing the body or error message.

   Let's change the approach:

   We can capture both stdout and stderr of curl, but since we use `-s`, there might be no way to get errors without disabling silent mode.

   Alternatively, we can remove `-s` and then check for non-zero exit code. But that would print the response which is not desired in some cases (like ollamaVersion).

   We need a balance:

     For functions that are internal to the library (like `ollamaApiPost`) we don't want to change their output because they are meant to be used by other functions.

     However, note that the script currently does two things with curl:
        - In some cases, it just runs and returns success (if no error) but doesn't capture anything.
        - In others, it captures the response body.

   Let's restructure:

     We can create a function `ollama_api_request` that takes a method (GET/POST), an endpoint, and optional data. It will return 0 on success and non-zero on failure, and also set an output variable if needed?

   But we don't want to change the existing functions too much because they are used by other users.

   Alternatively, we can change all the API functions (the ones that call curl) to check for errors and then let the user decide what to do with the response? 

   However, note that some of these functions (like `ollamaClearModel`) don't even capture the response. They just make a request.

   Let's think about each function:

     ollamaIsInstalled: This is okay because it checks for existence of the command and returns accordingly.

     safeJson: We should check if the input is valid JSON? But jq can handle escaping, so maybe we don't need to. Instead, let's capture any error from jq.

        Proposed change:
          safeJson() {
            debug "safeJson: $1"
            # Use jq to escape and return as string
            escaped=$(jq -Rn --arg str "$1" '$str' 2>/dev/null)
            if [ $? -eq 0 ]; then
              echo "\"${escaped}\""
              return $RETURN_SUCCESS
            else
              debug "Error: unsafe JSON input"
              return $RETURN_ERROR
            fi
          }

     ollamaApiGet and ollamaApiPost: We should check the exit code of curl.

        Let's change:

          ollamaApiGet() {
            local url=$1
            debug "ollamaApiGet: $url"
            if ! curl -s -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' ; then
              return $RETURN_ERROR
            else
              # We might want to capture the output for some functions?
              response=$?
              if [ $response -eq 0 ]; then
                echo "${output}"   # But what is in ${output}? Let's not change behavior without knowing.
                return $RETURN_SUCCESS
              else
                debug "Error: curl failed"
                return $RETURN_ERROR
              fi
            }
          }

        Wait, we are using `-s` so that the output is suppressed. We cannot capture the response body? Then how can we check for errors in the API?

        Actually, without capturing the body, we don't know if the request was successful or not (unless curl returns an error). But note: even a 200 response might have invalid JSON.

        However, let's stick to checking the exit code of curl first. Then, if there is no error, we can capture the output and check it for errors (if needed) but that would require more work.

   Given time constraints, perhaps the best approach is:

     1. For every API call function (ollamaApiGet, ollamaApiPost), change them to check curl's exit code.
        We'll remove `-s` because we want to capture any output (for debugging and for functions that use the response). But note: some of these functions are called by user-facing ones.

     2. Change the way `ollamaGenerate` and similar functions work so they get an error if curl fails, but still return the JSON string on success? 

        Alternatively, we can change:

          ollamaGenerate() {
            local model=$1
            local prompt=$2

            # Call the API with proper error checking
            response=$(ollamaApiPost "/api/generate" "{\"model\": \"$1\", \"prompt\": $(safeJson \"$2\"), \"stream\": false}")
            if [ $? -eq $RETURN_SUCCESS ]; then
              echo "$response"
              return 0
            else
              debug "Error in ollamaGenerate: failed to post request"
              return 1
            fi
          }

        But wait, we are already capturing the response and returning it. We need a way for these functions (like `ollamaClearModel`) to know if the curl call succeeded.

   Let's change all API wrapper functions (ollamaApiGet, ollamaApiPost) to return based on curl's exit code.

   Also, note that in `safeJson` we are using jq without checking. We should fix that too.

   However, let's consider: what if the user passes an argument with a newline? The safeJson function uses `-Rn` and then sets it as an arg. This might be okay because curl expects JSON string.

   But note: the Ollama API might not accept newlines in the prompt. We are just trying to escape for JSON, but if there's a newline we can't represent that without using `jq -R` (raw string). Then when we use it in the JSON, we must be careful because jq will put quotes around it and then replace some escapes.

   Alternatively, let's change the safeJson function to return an error if the input contains any non-printable characters except for those allowed in a JSON string? That might be too broad. Instead, let's just capture errors from jq.

   We'll do:

     safeJson() {
        local s=$1
        # Use jq -Rn to output raw strings and escape them appropriately.
        # But if the input has newlines, we want to keep them as separate lines? Then use `jq -Rr` for raw string (without quotes) or without `-R`?
        #
        # Let's stick with escaping: we want a JSON string. So we should pass it through jq and return the escaped version.
        #
        if [ "$(jq -eRn --arg str "$s" '$str')" ]; then
          echo "\"$(jq -Rr --arg str "$s" '$str')\""
          # Note: We are using `jq -Rr` to output raw string with double quotes. But the original function used `-Rn` which outputs without quotes.
        else
          return $RETURN_ERROR
        fi
     }

   Wait, that doesn't work because we want to escape the string for JSON and then put it in a JSON value.

   Actually, let's use `jq -n --arg str "$s"` which returns the escaped string (without extra quotes). Then if there's an error, jq exits with non-zero. But note: `-R` is used for raw input? We don't want that because we are dealing with a string that might have escapes.

   Let me explain:

     The original safeJson function does:
        jq -Rn --arg str "$1" '$str'

        Without the `--args` option, but note: `-Rn` is for raw input and non-number. Then it outputs the value of $str (which is a string) as a JSON string.

     But if we use `jq -n` without `-R`, then:
        jq -n --arg str "$s" '$str'

        This will output: "some string", even if there are newlines, because jq reads from stdin and the variable expansion might break it.

   We want to escape for JSON. So let's change:

     safeJson() {
        local s=$1
        # Check if we can expand the variable without issues? But note that the input is taken from user.
        #
        # Let's use jq without -R because we want to escape any special characters (including newlines) appropriately.
        #
        debug "safeJson: $s"
        local escaped
        escaped=$(jq -n --arg str "$s" '$str')
        if [ $? -eq 0 ]; then
          echo "$escaped"
          return $RETURN_SUCCESS
        else
          debug "Error: Failed to escape string with jq, input might be too complex or missing dependencies."
          return $RETURN_ERROR
        fi
     }

   But note: the variable expansion in shell for `$1` might break if there are spaces? Actually, we are using `--arg str "$s"` which takes the entire argument. So it's safe.

   However, let's consider performance and the fact that this function is called by other functions. We should avoid unnecessary complexity unless needed.

   Given the above, I propose:

     1. Change every API call (ollamaApiGet, ollamaApiPost) to check the exit code of curl and return appropriately.
        But note: we are using `-s` which suppresses output. Let's remove `-s` so that we can capture any response.

        Then in these functions:

          ollamaApiGet() {
            local url=$1
            debug "ollamaApiGet: $url"
            if ! curl -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' ; then
              return $RETURN_ERROR
            else
              # Now we capture the output and set a variable?
              local response=$?
              if [ $response -eq 0 ]; then
                echo "$(curl -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '')"
                return $RETURN_SUCCESS
              else
                debug "Error in curl call for ollamaApiGet"
                return $RETURN_ERROR
              fi
            }
          }

        Wait, that would duplicate the curl command. We can do:

          ollamaApiGet() {
            local url=$1
            debug "ollamaApiGet: $url"
            if ! output=$(curl -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' 2>&1) ; then
              return $RETURN_ERROR
            else
              # Check the exit code of curl separately? Actually, we are checking the entire command.
              if [ $? -eq 0 ]; then
                echo "$output"
                return $RETURN_SUCCESS
              else
                debug "Error: curl failed for ollamaApiGet: $output"
                return $RETURN_ERROR
              fi
            }
          }

        But note: we are redirecting stderr to stdout and capturing it in the same variable. Then if there's an error, output will contain the error message.

     2. Change `ollamaClearModel` to use ollamaApiPost with proper checking? Actually, let's change all functions that call the API to check for errors by using a wrapper function that returns true/false and captures curl's exit code (and maybe response body if needed).

   However, note that some of these functions are called by other library functions. We must be consistent.

   Let's create two new functions:

     ollama_api_get() {
        local url=$1
        local data=""
        # Check if there is an error in curl call
        response=$(curl -X GET "$OLLAMA_BASH_LIB_API$url" -H 'Content-Type: application/json' -d '' 2>&1)
        http_code=$(echo "$response" | jq -e '.status' 2>/dev/null || echo "999")
        if [ $? -ne 0 ]; then
          # If no response or error, set a non-zero exit code.
          local curl_exit=$?
          return $curl_exit
        else
          return 0
        fi
     }

   But wait, this is too complex and we don't know the structure of the Ollama API responses.

   Alternatively, let's keep it simple: check for curl errors (exit code) in each function that uses it. We can do:

     ollamaClearModel() {
        if [ -z "$1" ]; then
          debug "Error: no model name"
          return $RETURN_ERROR
        fi

        # Check if curl is available? Or we are already using it via the wrapper?
        local response
        # We'll use a wrapper that checks curl exit code, but without capturing the body until needed.
        # Let's change: remove ollamaApiPost and do direct call with checking.

        debug "ollamaClearModel: $1"
        if ! curl -X POST "$OLLAMA_BASH_LIB_API/kill" -H 'Content-Type: application/json' -d "{\"model\": \"$1\"}"; then
          return $RETURN_ERROR
        else
          return $RETURN_SUCCESS
        fi

     }

   But wait, we don't have a wrapper for the kill endpoint. We should change all API calls to use direct curl with checking.

   However, note that the function `ollamaApiPost` is not being used by any user-facing function? Let's see:

      ollamaGenerate: uses ollamaApiPost (but we are going to change it)
      ollamaClearModel: currently uses a wrapper function and then captures output.

   We need to restructure the API calls without relying on internal functions because they don't check for errors.

   Let's remove the `ollamaApiGet` and `ollamaApiPost` functions entirely and instead have:

     # GET request to the Ollama API
     ollama_api_get() {
        curl -s -X GET "$OLLAMA_BASH_LIB_API/endpoint" ... 
        return $?
     }

   But wait, we want to capture output sometimes. We can do two things: either use a wrapper that checks and returns an error code, or let the user check by calling the function and then checking $?.

   Given the time, I think it's better to change every API call in the library functions to:

        if ! command; then
          return $RETURN_ERROR
        else
          return $RETURN_SUCCESS
        fi

   But note: some of these commands are not curl (like ollama list). We should only check for errors when making HTTP requests.

   Alternatively, we can create a set of functions that do the API calls with proper error handling and then let the library functions use them appropriately.

   Due to complexity and time constraints, I will propose changes step by step:

   Step 1: Change `ollamaIsInstalled` (already good)

   Step 2: Change `safeJson` to capture errors from jq.

        safeJson() {
          local s=$1
          # We want to return the escaped string or an error code.
          if [ "$(jq -n --arg str "$s" '$str')" ]; then
            echo $(jq -n --arg str "$s" '$str')
            return $RETURN_SUCCESS
          else
            debug "Error: unsafe JSON input"
            return $RETURN_ERROR
          fi
        }

   But wait, this doesn't capture the output. We should do:

        escaped=$(jq -n --arg str "$s" '$str' 2>/dev/null)
        if [ $? -eq 0 ]; then
          echo "\"${escaped}\""
          return $RETURN_SUCCESS
        else
          debug "Error: Failed to escape string with jq, input might be invalid."
          return $RETURN_ERROR
        fi

   However, note that the original function was intended to output a quoted safe json value. But we are now returning an error code and capturing.

   Step 3: Change all API functions (ollamaApiGet, ollamaApiPost) to check curl's exit code without -s.

        ollamaApiGet() {
          local url=$1
          debug "ollamaApiGet: $url"
          if ! response=$(curl "$OLLAMA_BASH_LIB_API$url" ...); then
            return $RETURN_ERROR
          else
            # We don't know the structure, so we'll just check that curl didn't fail and capture the output.
            echo "$response"
            return $RETURN_SUCCESS
          fi
        }

   But wait, this would print the response even when debugging. And note: in some cases (like ollamaVersion) we don't want to print.

   We must be cautious because these functions are used by other library functions and user-facing ones.

   Let's change each function that uses the API to check for errors properly without relying on silent exit codes.

   Since I cannot see the entire script, let me propose a general way:

        ollama_api_request() {
          local method=$1
          local endpoint=$2
          local data="${3:-}" # If third argument is empty, use empty string

          if [ "$method" = "GET" ]; then
            curl -s -X GET ... 
          elif [ "$method" = "POST" ]; then
            curl -s -X POST ...
          else
            return 1
          fi

          # But we don't want to capture the output for all? We only do so when needed.
        }

   This is getting too complex. Given the instructions, I think a code review with specific recommendations would be better.

   Let's summarize:

     - The script has no error checking in many places (curl calls).
     - It uses `-s` which suppresses curl output and errors, making it hard to debug.
     - Some functions capture output without returning an error code based on the response.

   Proposed changes:

     1. Remove `-s` from all curl commands so that we can see any error messages (if they occur) unless in a context where we don't want them (like ollamaVersion).
        But note: some of these functions are intended to return JSON or text without showing it? We need to decide.

     2. Change the API call functions (ollamaApiGet, ollamaApiPost) to check for errors and capture output appropriately.
        However, let's leave them as simple wrappers that just run curl and then return based on exit code of curl.

        Example:

          ollama_api_get() {
            local endpoint=$1
            debug "GET $endpoint"
            if ! curl -X GET "$OLLAMA_BASH_LIB_API$endpoint" -H 'Content-Type: application/json' -d '' ; then
              return 1
            else
              # We capture the output for functions that use this?
              local response=$?
              if [ $response -eq 0 ]; then
                echo "$(curl -X GET "$OLLAMA_BASH_LIB_API$endpoint" -H 'Content-Type: application/json' -d '')"
                return 0
              else
                debug "Error in curl call for GET $endpoint, exit code $response"
                return 1
              fi
            }
          }

        But this duplicates the curl command. We can do:

          ollama_api_get() {
            local endpoint=$1
            # The URL might be set by environment variable or default.
            debug "GET $endpoint"

            output=$(curl -X GET "$OLLAMA_BASH_LIB_API$endpoint" -H 'Content-Type: application/json' -d 2>&1)
            curl_exit=$?
            if [ $curl_exit -ne 0 ]; then
              echo "Error: curl failed for API request to $endpoint"
              return 1
            else
              echo "$output"
              return 0
            fi
          }

        But note that this function now outputs the response (or error) and returns. It changes the behavior.

   Since we are not provided with documentation about Ollama API errors, let's stick to checking curl exit codes for all API calls.

   Let's change every function that uses `ollamaApiGet` or `ollamaApiPost` to use direct curl without relying on those wrapper functions. But wait, the script has a few functions:

        ollamaClearModel
        ollamaGenerate (both non-streaming and streaming)
        ollamaListJson

   We can change these directly.

   Step-by-step plan for each function:

     1. debug: Keep as is.
     2. ollamaIsInstalled: Keep as is, because it's a simple command check.
     3. safeJson: Change to use jq without -s and capture errors.
        We'll do:
          safeJson() {
            local s=$1
            # This function returns the escaped string or an error code.
            if [ $(jq -n --arg str "$s" '$str' 2>/dev/null) ]; then
              echo "\"$(jq -n --arg str "$s" '$str')\""
              return $RETURN_SUCCESS
            else
              debug "Error: Failed to escape string with jq, input might be invalid or missing dependencies."
              return $RETURN_ERROR
            fi
          }

        But note: the original usage was without quotes. Let's keep it as escaping for JSON.

     4. ollamaApiGet and ollamaApiPost: Remove these wrapper functions because they are not being used by any function? Actually, let me check:

        - ollamaClearModel uses a direct call to curl via the wrapper (but we'll change that).
        - ollamaGenerate uses a direct call to curl.

     5. Change `ollamaClearModel` to use direct curl and check exit code.
          ollamaClearModel() {
            if [ -z "$1" ]; then
              debug "Error: no model name"
              return $RETURN_ERROR
            fi

            # We want to clear the model context, so we need to send a POST request to /api/generate with keep_alive=0.
            response=$(curl -X POST "${OLLAMA_BASH_LIB_API}/api/generate" -H 'Content-Type: application/json' -d "{\"model\": \"$1\", \"keep_alive\": 0}")
            if [ $? -ne 0 ]; then
              debug "Error in ollamaClearModel curl call"
              return $RETURN_ERROR
            else
              # We don't know what the response is, but Ollama might send a success or failure status.
              echo "$response"
              return $RETURN_SUCCESS
            fi
          }

     6. Similarly, change `ollamaGenerate` and others.

   But note: some functions (like ollamaListJson) are using /api/tags which returns a JSON array of tags? We don't capture the output because we want to check for errors by exit code.

   Let's do this:

        ollamaListJson() {
          # This is an internal function, but let's change it.
          debug "ollamaListJson"
          response=$(curl -X GET "${OLLAMA_BASH_LIB_API}/api/tags" -H 'Content-Type: application/json' -d '')
          if [ $? -ne 0 ]; then
            return $RETURN_ERROR
          else
            echo "$response"
            return $RETURN_SUCCESS
          fi
        }

   However, note that the original function does not capture any output. We are changing it to capture and print.

   But wait, in `ollamaListJson` we don't want to change its behavior because if you call this from your script, you expect the JSON response.

   So let's keep the existing functions' purpose but improve their error handling:

        ollamaListJson() {
          debug "ollamaListJson"
          # Check curl exit code
          if ! output=$(curl -X GET "${OLLAMAGenerated by ChatGPT (Continue)"}...); then
            return $RETURN_ERROR
          else
            echo "$output"
            return $RETURN_SUCCESS
          fi
        }

   But note: the function `ollamaListJson` is user-facing? It says output json. So we should capture and print.

   Alternatively, let's keep a minimal change in each function that uses curl:

        We can leave the function as it is (without capturing) if it doesn't need to return the response body. But then how do we know if there was an error?

        For example: ollamaVersionJson might be just checking for existence, but without any output.

   Let's think about what each API endpoint returns:

     - /api/tags: Returns a JSON object (curl gives it) and we want to capture that.
     - /api/ps: Similarly.

   But note: the function `ollamaVersionJson` is just checking for existence? Actually, no. It doesn't check anything but makes a request.

   Given the complexity and lack of documentation on Ollama API error responses, I think it's best to change every curl call in this library to:

        Check if the command (curl) exits with an error -> then return $RETURN_ERROR
        Otherwise, capture the output and use it as needed, but also check if the response is valid JSON? Not now.

   We'll do a code review that focuses on best practices for bash functions and minimal changes to add error checking:

   Changes:

     1. Add -e option to bash (set -e) so that any command with non-zero exit fails the function. But note: some of these are intended to return even if there's an error? So we cannot set -e at the top level.

        Instead, let's leave it without set -e and rely on explicit checks.

     2. Change all curl calls to use output variable and check $?.

        Example:

          ollama_api_get() {
            local url=$1
            debug "ollamaApiGet: $url"
            if ! response=$(curl -X GET "$OLLAMA_BASH_LIB_API$url" ...); then
              return 1
            else
              # Check the exit code of curl separately? We captured it in $? but we don't know.
              local curl_exit=$?
              if [ $curl_exit -ne 0 ]; then
                debug "Error: curl failed with exit code $curl_exit"
                return 1
              else
                echo "$response"
                return 0
              fi
            }
          }

        But note: we are capturing the entire output including stderr because of `2>&1`.

     3. Change safeJson to capture jq errors.

   However, due to the length and complexity, I think a full code review with recommendations is better than making extensive changes in one go.

   Let's provide a list of issues and how to fix them:

   Issues:

     - Functions do not handle curl errors consistently.
     - There is no checking for jq errors.
     - The library functions like ollamaClearModel, ollamaGenerate are using wrapper functions that don't check for errors.
     - Some functions capture output (like in `ollamaListArray`) but others don't.

   Recommendations:

     1. Remove the dependency on internal API functions and use direct curl calls with proper error handling in each function.
        This will ensure that every call is checked.

     2. For example, change `ollamaClearModel` to:

          ollamaClearModel() {
            if [ -z "$1" ]; then
              debug "Error: no model name"
              return $RETURN_ERROR
            fi

            local response
            # We are clearing the model by generating with keep_alive=0.
            # But note: this might not be the correct endpoint. Let's assume it is.

            if ! curl -X POST "$OLLAMA_BASH_LIB_API/api/generate" -H 'Content-Type: application/json' -d "{\"model\": \"$1\", \"keep_alive\": 0}"; then
              debug "Error in ollamaClearModel"
              return $RETURN_ERROR
            else
              response=$?
              if [ $response -eq 0 ]; then
                # We might want to capture the output for debugging or further processing.
                echo "$response"   # But what is $response? It's not set because we used `if ! command` and didn't capture.
                return $RETURN_SUCCESS
              else
                debug "Error: curl failed with exit code $response"
                return $RETURN_ERROR
              fi
            }
          }

        Wait, this doesn't work because we haven't captured the output.

        Let's do:

          ollamaClearModel() {
            if [ -z "$1" ]; then
              debug "Error: no model name"
              return $RETURN_ERROR
            fi

            local curl_exit
            # We don't want to capture stderr unless it is part of the response.
            # But let's do a simple check without capturing.

            if ! curl -X POST "$OLLAMA_BASH_LIB_API/api/generate" -H 'Content-Type: application/json' -d "{\"model\": \"$1\", \"keep_alive\": 0}"; then
              debug "Error in ollamaClearModel"
              return $RETURN_ERROR
            else
              # We don't capture the response body, so we can just use the exit code.
              local output=$(curl ... 2>&1)
              curl_exit=$?
              if [ $curl_exit -eq 0 ]; then
                debug "ollamaClearModel successful"
                return $RETURN_SUCCESS
              else
                debug "Error: curl failed in ollamaClearModel"
                return $RETURN_ERROR
              fi
            }
          }

        But note that we are capturing stderr and including it in the output. This might be what we want.

     3. Alternatively, let's create a helper function for API requests:

          # Check if curl is available? We assume it is.
          ollama_api_request() {
            local method=$1
            local endpoint=$2
            local data="${3:-}" 

            debug "ollama_api_request: $method to $endpoint with data $data"

            case "$method" in
              GET)
                if [ -z "$data" ]; then
                  response=$(curl -X GET "$OLLAMA_BASH_LIB_API$endpoint")
                else
                  # Not sure how to handle GET with non-empty data? Maybe not.
                  echo "GET doesn't typically send data"
                  return 1
                fi
                ;;
              POST)
                if [ -z "$data" ]; then
                  response=$(curl -X POST "$OLLAMA_BASH_LIB_API$endpoint")
                else
                  response=$(curl -X POST "$OLLAMA_BASH_LIB_API$endpoint" -d "$data"))
                fi
                ;;
            esac

            local curl_exit=$?
            if [ $curl_exit -eq 0 ]; then
              echo "$response"
              return 0
            else
              debug "Error: curl failed for ollama_api_request, exit code $curl_exit"
              return 1
            fi
          }

        Then use this helper function in all the other functions that require API calls.

   Given the time and complexity of a full rewrite, I think it's better to provide recommendations rather than a complete fixed script.

   Let me know if you want me to focus on specific improvements or if you'd like a complete refactored version.
