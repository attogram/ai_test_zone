<think>
Okay, I need to write a PHP function that takes an array and outputs a HTML list of its contents. Let me think about how to approach this.

First, I should consider what the function needs to do. The goal is to convert an array into a HTML list structure. So each element in the array should appear on a new line in the HTML output.

I remember that in PHP, strings are handled with double quotes, and variables can be accessed using square brackets. So maybe I'll use something like "<ul>" for the start tag, then add each item inside "<li>", and finally close it with "</ul>".

Wait, but if the array is empty, I should handle that case to avoid errors. Also, what if some elements are arrays themselves? Hmm, perhaps the function assumes that all elements are scalar values since we're outputting them as text in HTML.

So the steps I'll take:

1. Check if the input array is empty. If it is, return an empty string or a simple message indicating no items.
2. Initialize an empty string for the HTML content.
3. Loop through each element of the array:
   - For each element, append it to the HTML content within <li> tags.
4. After processing all elements, wrap them in <ul> and </ul> to form a list.

Wait, but looking at the example, maybe each item is on its own line inside the list. So perhaps using <ul> with each item as separate <li> elements? Or maybe just each item is within <li> without enclosing it in <ul>. Hmm, perhaps the user wants each array element to be a separate list item.

So for example, if the input is [1,2,3], the output should be:

<li>1</li>
<li>2</li>
<li>3</li>
</li>

But maybe it's better to have it in a single <ul> with each item as a separate list item. Alternatively, perhaps each element is its own list item without wrapping in an outer list.

I think the user might want each element to be on a new line within the HTML list. So perhaps each element is inside <li> tags, and all are part of the main list.

Wait, maybe I should structure it as follows:

- Start with <ul>
- For each item in the array:
   - Add "<li>" followed by the item's string representation
- End with "</ul>"

But wait, if the array is empty, this would result in just <ul>, which might not be desired. So perhaps handle that case first.

Let me outline the function:

Function create_html_array($array) {

   if ($array is empty) {
      return "<ul>" . "></ul>";
   }

   $html = "<ul>";
   foreach ($array as $key => $value) {
      $html .= "<li>" . $value . "</li>";
   }
   $html .= "</ul>";

   return $html;
}

Wait, but in the example given in the problem statement, perhaps each item is just displayed on a new line without being inside <li>. Maybe I'm overcomplicating.

Alternatively, perhaps it's simpler to loop through each element and append them as separate lines within the HTML list. For example:

For an array like [1,2,3], the HTML would be:

1
2
3

But in HTML, this would be written as <div>1</div><div>2</div><div>3</div>, but perhaps the user wants each element on a new line within a list.

Wait, maybe I should check the example. The problem says to output a html list of the array contents. So perhaps it's similar to how lists are in HTML.

In that case, perhaps each element is inside <li> tags, and all are part of an outer list. For example:

<li>1</li>
<li>2</li>
...

So for the function, I should create a string like this:

For each element in $array, add "<li>" . $element . "</li>", then wrap them in <ul>...</ul>.

Wait, but that would make it like:

<li>1</li>
<li>2</li>

Which is correct.

So putting it all together:

Function create_html_array($array) {

   if (empty($array)) {
      return "<ul></ul>";
   }

   $html = "<ul>";
   foreach ($array as $key => $value) {
      $html .= "<li>" . $value . "</li>";
   }
   $html .= "</ul>";

   return $html;
}

But wait, what if the array has string elements that include newlines? For example, if an element is "a\nb", would it be displayed as "a\nb" or split into two lines?

Probably, each element should be treated as a single string and placed on its own line. So perhaps the function doesn't need to handle anything beyond just wrapping each value in <li> tags.

Testing this function with some examples:

Example 1: $array = [1,2,3]

The output would be:

<li>1</li>
<li>2</li>
<li>3</li>

Which is correct.

Another example: $array = ['a', 'b']

Output:

<li>a</li>
<li>b</li>

Yes.

What about an empty array? The function returns "<ul></ul>", which might be acceptable if that's what the user expects when there are no items.

Alternatively, perhaps just return a simple <div> or something else, but I think the current approach is correct.

So in PHP code:

function create_html_array($array) {
    if (empty($array)) {
        return "<ul></ul>";
    }
    $html = "<ul>";
    foreach ($array as $key => $value) {
        $html .= "<li>" . $value . "</li>";
    }
    $html .= "</ul>";
    return $html;
}

But wait, what if the array contains objects or arrays? Because PHP will treat them as variables. So perhaps we need to convert each element to a string. But in the problem statement, it's not specified, so maybe assume that all elements are scalars.

Testing this function with sample inputs should work.
</think>

To solve this problem, we need to write a PHP function that takes an array and outputs a HTML list of its contents. Each element of the array will be displayed on a new line within the HTML structure.

### Approach
1. **Check for Empty Array**: If the input array is empty, return a simple HTML `<ul></ul>` to indicate no items are present.
2. **Initialize HTML Structure**: Start with an opening `<ul>` tag.
3. **Loop Through Array**: For each element in the array, append it as a list item within `<li>` tags.
4. **Close HTML Structure**: After processing all elements, close the `</ul>` tag to complete the HTML list structure.

### Solution Code
```php
function create_html_array($array) {
    if (empty($array)) {
        return "<ul></ul>";
    }
    $html = "<ul>";
    foreach ($array as $key => $value) {
        $html .= "<li>" . $value . "</li>";
    }
    $html .= "</ul>";
    return $html;
}
```

### Explanation
- **Empty Array Handling**: The function first checks if the input array is empty. If it is, it returns a simple HTML `<ul></ul>` to indicate no items are present.
- **HTML Structure Initialization**: The function initializes an empty HTML list structure starting with `<ul>'.
- **Loop Through Elements**: Each element from the array is looped through, and each element is converted into a `<li>` tag. This ensures that each element appears on a new line within the list.
- **Finalize HTML Structure**: After all elements have been processed, the function closes the `</ul>` tag to complete the HTML list structure.

This approach ensures that each element from the array is displayed correctly in a HTML list format, making it easy to visualize and navigate through the data using web pages.

