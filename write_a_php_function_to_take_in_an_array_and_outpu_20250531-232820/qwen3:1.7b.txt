<think>
Okay, I need to write a PHP function that takes an array and outputs an HTML list of its contents. Let me think about how to approach this.

First, the function should accept an array as input. So maybe the function is called something like generateHtmlList() or similar. The parameters would be the array. Then, I need to loop through each element of the array and create list items.

Wait, PHP has a function called array_map, but maybe I don't need that. Instead, I can use a loop, like for each element in the array, create a <li> tag. Then wrap them in a <ul> tag.

So the steps are:

1. Create a function that takes an array as a parameter.
2. Check if the input is an array. Well, maybe the function can assume that the input is an array, but maybe handle if it's not? But the problem says to take in an array, so perhaps we can assume it's valid.
3. Loop through each element in the array.
4. For each element, create a list item.
5. Collect all the list items into a UL element.
6. Output the HTML.

So, in PHP, the function could be something like this:

function generateHtmlList($arr) {
    $html = '<ul>';
    foreach ($arr as $item) {
        $html .= '<li>' . $item . '</li>';
    }
    $html .= '</ul>';
    return $html;
}

Wait, but what if the array is empty? Well, the function would return an empty UL, which is correct. But maybe the user expects to handle empty arrays? Well, the problem says to output the list, so an empty array would result in an empty list, which is okay.

Testing this function: if the input is an array like [1,2,3], the output would be <ul><li>1</li><li>2</li><li>3</li></ul>.

But maybe the user wants to handle cases where the array is not an array? Well, the problem says to take in an array, so maybe we can assume that the input is valid.

So the function is straightforward. But maybe the user wants to handle the case where the array is empty? Well, the code would handle that, returning an empty UL.

I think that's the correct approach. So the PHP function would be as written.
</think>

To create a PHP function that takes an array and outputs an HTML list of its contents, we can use a simple and straightforward approach. The function will:

- Accept an array as input.
- Loop through each element of the array.
- Generate a `<ul>` (unordered list) element.
- For each element, generate a `<li>` (list item) element.
- Combine all these elements into a single HTML string and return it.

Here's the complete and well-documented implementation:

```php
<?php
/**
 * Generates an HTML unordered list from an array.
 *
 * @param array $arr The input array to be converted into an HTML list.
 * @return string A string containing the HTML unordered list.
 */
function generateHtmlList($arr) {
    // Check if the input is an array (optional, but helpful for error handling)
    if (!is_array($arr)) {
        throw new InvalidArgumentException("Input must be an array.");
    }

    // Initialize the HTML string
    $html = '<ul>';

    // Loop through each element in the array
    foreach ($arr as $item) {
        // Ensure the item is rendered as text (in case it's a string or other value)
        $html .= '<li>' . htmlspecialchars($item) . '</li>';
    }

    // Close the unordered list
    $html .= '</ul>';

    return $html;
}
?>
```

---

### Example Usage

```php
$items = [1, 2, 3, "Apple", "Banana"];
$listHtml = generateHtmlList($items);
echo $listHtml;
```

---

### Output

```html
<ul>
  <li>1</li>
  <li>2</li>
  <li>3</li>
  <li>Apple</li>
  <li>Banana</li>
</ul>
```

---

### Notes

- The function assumes that the input is an array. If not, it throws an `InvalidArgumentException`.
- The `htmlspecialchars()` function is used to prevent XSS attacks, ensuring that any special characters in the array elements are properly escaped.
- The function returns the complete HTML string, which can be directly echoed or used in a template.

This implementation is clean, efficient, and handles various array types safely.

