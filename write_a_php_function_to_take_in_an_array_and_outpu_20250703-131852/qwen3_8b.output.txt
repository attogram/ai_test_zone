
Here's a well-structured and secure PHP function that takes an array as input and outputs a formatted HTML unordered list (`<ul>`) of its contents. The function ensures that all values are properly escaped to prevent potential security issues such as XSS (Cross-Site Scripting).

---

### ‚úÖ PHP Function: `arrayToHTMLList`

```php
<?php
function arrayToHTMLList($array) {
    echo '<ul>';
    foreach ($array as $item) {
        echo '<li>' . htmlspecialchars($item, ENT_QUOTES, 'UTF-8') . '</li>';
    }
    echo '</ul>';
}
?>
```

---

### üîç Explanation

- **Function Definition**: `arrayToHTMLList($array)` accepts an array as input.
- **HTML Unordered List**: The function starts by echoing an opening `<ul>` tag.
- **Loop Through Array**: It then iterates over each item in the array using `foreach`.
- **HTML Escaping**: Each item is wrapped in an `<li>` tag and passed through `htmlspecialchars()` to safely escape any special characters, ensuring safe output.
- **Encoding Options**: `ENT_QUOTES` and `'UTF-8'` are used to ensure proper handling of quotes and UTF-8 characters.
- **Closing the List**: Finally, the function echoes a closing `</ul>` tag to complete the list structure.

---

### üìå Example Usage

```php
<?php
$fruits = ['Apple', 'Banana', 'Cherry'];
arrayToHTMLList($fruits);
?>
```

This will output:

```html
<ul>
<li>Apple</li>
<li>Banana</li>
<li>Cherry</li>
</ul>
```

---

### üìå Notes

- This function assumes the input is a flat array.
- For nested arrays, a recursive approach would be required, but that is beyond the scope of this question.
- The function is designed to **output** the HTML directly, making it suitable for simple use cases where the HTML is to be rendered immediately.

Let me know if you'd like the function to return the HTML as a string instead of echoing it.
